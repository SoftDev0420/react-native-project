
type File {
  id: ID! @unique
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}
#skiscool
type Organization {
  id: ID! @unique
  name: String! @unique
  owner: User @relation(name: "UserOnOrganization")
  persons: [Person!]!
}

type User {
  id: ID! @unique
  name: String! @unique
  email: String! @unique
  company: Organization @relation(name: "UserOnOrganization")
  password: String!
  firstName: String
  lastName: String
  active_flag: Active
  role: Role
}

#contact User / instructor skiscool:
type Person {
  id: ID! @unique
  name: String! @unique
  owner: User
  email: String
  phone: String
  pictures: [Picture!]!
  products: [Product!]!
  deals: [Deal!]!
}

enum Active {
  ACTIVATED
  NOTACTIVATED
}

enum Role {
  USER
  PERSON
}

type Pipeline {
  id: ID! @unique
  name: String! @unique
  order_nr: String
  deal_probability: Probability
  deals: [Deal!]!
}

type Stage {
  id: ID! @unique
  name: String! @unique
  pipeline: Pipeline
  order_nr: String
  deal_probability: Probability
}

enum Probability {
  DISABLE
  ENABLE
}

type Product {
  id: ID! @unique
  name: String! @unique
  unit: String
  code: String
  owner: User
  deals: [Deal!]! @relation(name: "ProductDeals", onDelete: CASCADE)
}

type Deal {
  id: ID! @unique
  title: String! @unique
  value: String!
  currency: String!
  owner: User
  org: Organization
  participants: [Person!]!
  products: [Product!]! @relation(name: "ProductDeals", onDelete: CASCADE)
  stage: Stage
  status: OrderStatus
  probability: String
}

type Picture {
  id: ID! @unique
  file: String!
  uploads: [File!]!
}

enum OrderStatus {
  OPEN
  WON
  LOST
  DELETED
}
